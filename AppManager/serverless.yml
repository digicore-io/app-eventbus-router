service:
  name: eb-AppManager

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager
  - serverless-api-compression
  - serverless-add-api-key
  #- serverless-aws-documentation

custom:
  version: 1
  webpack:
    includeModules:
      forceExclude:
        - node_modules/aws-sdk
  role:
    dev: arn:aws:iam::997357843271:role/Lambda
    prod: arn:aws:iam::912918454053:role/Lambda
  deploymentBucket:
    dev: digicore-lambda-deployment-dev
    prod: digicore-lambda-deployment
  profile:
    dev: DigiCoreDev
    prod: DigiCoreProd
  domain:
    domainName:
      dev: "dev-api.digicore.io"
      prod: "api.digicore.io"
  customDomain:
    domainName: ${self:custom.domain.domainName.${self:provider.stage}}
    basePath: ${self:service.name}
    stage: ${self:provider.stage}
    createRoute53Record: false
    certificateName: "*.digicore.io"
    endpointType: "edge"
  apiKeys:
    - name: digicore-api-key
  ##### - Start Documentation ------####
  documentation:
    info:
      version: "1.0.0"
      title: "EventBus App Manager" # see note above about this being ignored
      description: "Use this API to manage Event Bus applications and company/event subscriptions to applications. This API also allows Apps to store customer data through AppEntity"
      termsOfService: "http://www.example.com/terms-of-service"
      contact:
        name: "Support"
        url: "http://www.example.com/me"
        email: "api-support@digicore.io"
      license:
        name: "Licensing"
        url: "http://www.example.com/licensing"
    models:
      - name: "AppEntity"
        description: "AppEntity is used as a data store for an App's custom data"
        contentType: "application/json"
        schema: ${file(models/AppEntity.json)}

  ##### - End Documentation ------####

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage,'dev'}
  profile: ${self:custom.profile.${self:provider.stage}}
  region: us-east-1
  stackName: ${self:service.name}
  role: ${self:custom.role.${self:provider.stage}}
  deploymentBucket:
    name: ${self:custom.deploymentBucket.${self:provider.stage}}
    serverSideEncryption: AES256
  apiName: ${self:service.name}
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${opt:stage,'dev'}

#TODO Add config for swagger gen
functions:
  service:
    handler: handler.handle
    name: ${self:service.name}-${self:provider.stage}
    events:
      - http:
          #name: "Application Company App Entity"
          path: applications/{applicationId}/companies/{companyId}/entities/{digicoreEntityId}
          method: get
          cors: true
          private: true
          # documentation:
          #   summary: "Gets an AppEntity"
          #   description: "digicoreEntityId is the internal DigiCore Entity ID. #For example, this may be a productId from an external catalog system"
          #   requestHeaders:
          #     - name: "x-api-key"
          #       description: "Your unique API key"
          #   pathParams:
          #     - name: "applicationId"
          #       description: "ID of the application that the AppEntity belongs to"
          #     - name: "companyId"
          #       description: "ID of the company that the AppEntity belongs to"
          #     - name: "internalEntityId"
          #       description: "ID of the the AppEntity"
          #   methodResponses:
          #     - statusCode: "200"
          #       responseBody:
          #         description: "AppEntity Response"
          #       responseModels:
          #         "application/json": "AppEntity"
      - http:
          method: put
          path: applications/{applicationId}/companies/{companyId}/entities/{digicoreEntityId}
          cors: true
          private: true
      - http:
          #name: "Application Company App Entity by External ID"
          path: applications/{applicationId}/companies/{companyId}/entities/external/{externalEntityId}
          method: get
          cors: true
          private: true
          # documentation:
          #   summary: "Gets an AppEntity using the externalEntityId. I.e. a Product ID from an external catalog System"
          #   description: "internalEntityId is the internal DigiCore Entity ID. #For example, this may be a productId from an external catalog system"
          #   requestHeaders:
          #     - name: "x-api-key"
          #       description: "Your unique API key"
          #   pathParams:
          #     - name: "applicationId"
          #       description: "ID of the application that the AppEntity belongs to"
          #     - name: "companyId"
          #       description: "ID of the company that the AppEntity belongs to"
          #     - name: "externalEntityId"
          #       description: "External ID of the AppEntity"
          #   methodResponses:
          #     - statusCode: "200"
          #       responseBody:
          #         description: "AppEntity Response"
          #       responseModels:
          #         "application/json": "AppEntity"
      - http:
          method: put
          path: applications/{applicationId}/companies/{companyId}
          cors: true
          private: true
      - http:
          path: companies/{companyId}/applications
          method: get
          cors: true
          private: true
