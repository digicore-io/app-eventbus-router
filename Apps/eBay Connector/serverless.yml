
service: EventBus-App-EbayConnector
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  sqs:
    dev: arn:aws:sqs:us-west-2:951585821496:EventBusApp-eBayConnector
    prod: PENDING
  deploymentBucket:
    dev: dpm-lambda-deployment-dev
    prod: dpm-lambda-deployment
  role:
    dev: arn:aws:iam::951585821496:role/Lambda
    prod: arn:aws:iam::211602931179:role/Lambda
  ebay-url:
    dev: https://api.sandbox.ebay.com/wsapi
    prod: https://api.ebay.com/wsapi
      
provider:
  name: aws
  runtime: java8
  region: us-west-2
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: ${self:custom.deploymentBucket.${self:provider.stage}}
    serverSideEncryption: AES256
  role: ${self:custom.role.${self:provider.stage}}
  
package:
  artifact: target/ebay-connector-dev.jar

functions:
  handle:
    handler: com.serverless.Handler
    name: EventBus-App-eBayConnector
    timeout: 60
    memorySize: 1024
    environment:
      STAGE: ${self:provider.stage}
      EBAY_API_URL: ${self:custom.ebay-url.${self:provider.stage}}
    events:
      - sqs: ${self:custom.sqs.${self:provider.stage}}
      
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
